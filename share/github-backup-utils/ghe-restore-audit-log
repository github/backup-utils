#!/usr/bin/env bash
#/ Usage: ghe-restore-audit-log
#/ Restore audit logs.
#/
#/ Note: This command typically isn't called directly. It's invoked by
#/ ghe-backup.
set -e

# Bring in the backup configuration
base_path="$( dirname "${BASH_SOURCE[0]}" )"
# shellcheck source=share/github-backup-utils/ghe-backup-config
. "${base_path}/ghe-backup-config"

# Show usage and bail with no arguments
[ $# -lt 1 ] && print_usage "$@"

GHE_HOSTNAME="$1"

# Setup GHE_REMOTE_XXX variables, host and make sure work dir is created
setup(){
  # Perform a host-check and establish GHE_REMOTE_XXX variables.
  ghe_remote_version_required "$GHE_HOSTNAME"
}

# Check whether the snapshot comes from an instance
# where the MySQL import was complete
is_import_complete(){
  test -e "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/audit-log/mysql-import-complete"
}

# Check whether the snapshot was taken on an instance
# where MySQL audit logs were enabled
mysql_restored_enabled(){
  test -e "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/audit-log-mysql"
}

remove_complete_flag(){
  ghe_verbose "Setting instance(s) as pending for audit log import to MySQL"
  ghe-ssh "$GHE_HOSTNAME" -- "sudo rm -rf $GHE_REMOTE_ROOT_DIR/data/user/common/audit-log-import/complete" 1>&3 2>&3

  if $CLUSTER; then
    if ! ghe-ssh "$GHE_HOSTNAME" -- "ghe-cluster-each -- sudo rm -rf /data/user/common/audit-log-import/complete" 1>&3 2>&3; then
      ghe_verbose "Failed to set as pending for audit log import to MySQL all instances in cluster"
    fi
  fi
}

# Use `ghe-backup-mysql-audit-log` to dump the audit entries.
# If the import to MySQL is complete, add a flag in the snapshot to indicate so.
restore_mysql(){
  ghe_verbose "Restoring MySQL audit logs ..."

  "${base_path}/ghe-restore-mysql-audit-log" "$GHE_HOSTNAME"

  if ! is_import_complete; then
    remove_complete_flag
    return
  fi

  ghe_verbose "Audit log import to MySQL is complete"
  ghe-ssh "$GHE_HOSTNAME" -- "sudo touch $GHE_REMOTE_ROOT_DIR/data/user/common/audit-log-import/complete" 
}

# Audit log indices in Elasticsearch are restored when:
#
#   - import to MySQL is not complete
#   - GHE_BACKUP_ES_AUDIT_LOGS is not set to 'no'
es_restore_enabled(){
  if ! is_import_complete; then
    return
  fi

  [ -z "$GHE_BACKUP_ES_AUDIT_LOGS" ] || [ "$GHE_BACKUP_ES_AUDIT_LOGS" != "no" ]
}

# Use ghe-restore-es-audit-log to restore Elasticsearch indices
restore_es(){
  ghe_verbose "Restoring Elasticsearch audit logs ..."

  "${base_path}/ghe-restore-es-audit-log" "$GHE_HOSTNAME"
}

# Whether or not we should trigger a reindex from MySQL into Elasticsearch
should_start_reindex(){
  if [ -z "$GHE_BACKUP_ES_AUDIT_LOGS" ] || [ "$GHE_BACKUP_ES_AUDIT_LOGS" != "no" ]; then
    ghe_verbose "GHE_BACKUP_ES_AUDIT_LOGS is not set to 'no'"
    return 1
  fi

  if ! ghe-ssh "$GHE_HOSTNAME" -- "test -e /usr/local/share/enterprise/ghe-auditlog-repair"; then
    ghe_verbose "ghe-auditlog-repiar doesn't exist"
    return 1
  fi
}

do_restore(){
  if mysql_restored_enabled; then
    restore_mysql
  else
    ghe_verbose "MySQL audit log restore is not enabled"
    remove_complete_flag
  fi

  if es_restore_enabled; then
    restore_es
    return
  fi

  ghe_verbose "Elasticsearch audit log restore is not enabled"

  if should_start_reindex; then
    ghe_verbose "Starting audit log reindex from MySQL to Elasticsearch"
    ghe-ssh "$GHE_HOSTNAME" -- "sudo systemctl --no-block restart auditlog-repair";
  fi
}

main(){
  bm_start "$(basename "$0")"
  setup
  do_restore
  bm_end "$(basename "$0")"
}

main
