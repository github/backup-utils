#!/usr/bin/env bash
#/ Usage: ghe-restore-repositories-gist-ng <host>
#/ Restore repositories fron an rsync snapshot of all Git repository data to a GitHub cluster.
#/
#/ Note: This script typically isn't called directly. It's invoked by the
#/ ghe-restore command when restoring into a cluster.
set -e

# Bring in the backup configuration
. $( dirname "${BASH_SOURCE[0]}" )/ghe-backup-config

# Show usage and bail with no arguments
[ -z "$*" ] && print_usage

bm_start "$(basename $0)"

# Grab host arg
GHE_HOSTNAME="$1"

# The snapshot to restore should be set by the ghe-restore command but this lets
# us run this script directly.
: ${GHE_RESTORE_SNAPSHOT:=current}

# Find the gists to restore
gist_paths=$(cd $GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/  && find repositories -mindepth 6 -maxdepth 7 -name \*.git | grep gist | cut -d / -f2-)

# No need to restore anything, early exit
if [ -z "$gist_paths" ]; then
  echo "Warning: Gist backup missing. Skipping ..."
  exit 0
fi

# Perform a host-check and establish GHE_REMOTE_XXX variables.
ghe_remote_version_required "$GHE_HOSTNAME"

# Generate SSH config for forwarding
# Split host:port into parts
port=$(ssh_port_part "$GHE_HOSTNAME")
host=$(ssh_host_part "$GHE_HOSTNAME")

# Add user / -l option
user="${host%@*}"
[ "$user" = "$host" ] && user="admin"

tempdir=$(mktemp -d -t backup-utils-restore-XXXXXX)
ghe-ssh "$GHE_HOSTNAME" -- mkdir -p $tempdir
ssh_config_file=$tempdir/ssh_config
opts="$GHE_EXTRA_SSH_OPTS -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no"
tmp_list=$tempdir/tmp_list
routes_list=$tempdir/routes_list
to_restore=$tempdir/to_restore

hostnames=$(ghe-cluster-hostnames "$GHE_HOSTNAME" "git-server")

ghe-ssh-config "$GHE_HOSTNAME" "$hostnames" > "$ssh_config_file"

cleanup() {
  ghe-ssh "$GHE_HOSTNAME" -- rm -rf $tempdir
  rm -rf $tempdir
}
trap cleanup EXIT

# Find the routes (servers) for each gist available locally
bm_start "$(basename $0) - Building gist list"
OLDIFS=$IFS; IFS=$'\n'
for path in $gist_paths; do
   echo $path
done > $tmp_list
IFS=$OLDIFS
bm_end "$(basename $0) - Building gist list"

bm_start "$(basename $0) - Transferring gist list"
cat $tmp_list | ghe-ssh "$GHE_HOSTNAME" -- sponge $tmp_list
bm_end "$(basename $0) - Transferring gist list"

bm_start "$(basename $0) - Generating routes"
echo "cat $tmp_list | github-env ./bin/gist-cluster-restore-routes > $routes_list" | ghe-ssh "$GHE_HOSTNAME" -- /bin/bash
bm_end "$(basename $0) - Generating routes"

bm_start "$(basename $0) - Transferring routes"
ghe-ssh "$GHE_HOSTNAME" -- cat $routes_list > $routes_list
bm_end "$(basename $0) - Transferring routes"

bm_start "$(basename $0) - Processing routes"
cat $routes_list | awk -v tempdir="$tempdir" '{ for(i=2;i<=NF;i++){ print $1 > (tempdir"/"$i".rsync") }}'
cat $routes_list | awk '{ n = split($1, p, "/"); i = p[n]; sub(/\.git/, "", i); printf i " /data/repositories/" $1; $1=""; print $0}' > $to_restore
bm_end "$(basename $0) - Processing routes"

# rsync all the gist repositories
bm_start "$(basename $0) - Restoring gists"
for route in $tempdir/*.rsync; do
  ghe-rsync -avrHR --delete \
    -e "ssh -q $opts -p $port -F $ssh_config_file -l $user" \
    --rsync-path="sudo -u git rsync" \
    --files-from=$route \
    "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/repositories/./" \
    "$(basename $route .rsync):$GHE_REMOTE_DATA_USER_DIR/repositories/" 1>&3
done
bm_end "$(basename $0) - Restoring gists"

bm_start "$(basename $0) - Finalizing routes"
cat $to_restore | ghe-ssh "$GHE_HOSTNAME" -- sponge $to_restore
ghe-ssh "$GHE_HOSTNAME" -- /bin/bash >&3 <<EOF
  split -l 1000 -d $to_restore $tempdir/chunk
  chunks=\$(find $tempdir/ -name chunk\*)
  parallel -i /bin/sh -c "cat {} | github-env ./bin/gist-cluster-restore-finalize" -- \$chunks
EOF
bm_end "$(basename $0) - Finalizing routes"

bm_end "$(basename $0)"
